diff --git a/dlls/ntdll/unix/process.c b/dlls/ntdll/unix/process.c
index 36ffe20f6dc4b4f91f598bfcd9b857a31f68110e..16b6821ab96bf490f8f6e4e06735e3d1383b5800 100644
--- a/dlls/ntdll/unix/process.c
+++ b/dlls/ntdll/unix/process.c
@@ -1227,7 +1227,8 @@ NTSTATUS WINAPI NtQueryInformationProcess( HANDLE handle, PROCESSINFOCLASS class
                     {
                         SERVER_START_REQ(get_process_vm_counters)
                         {
-                            req->handle = wine_server_obj_handle( handle );
+                            req->process_handle = wine_server_obj_handle( handle );
+                            req->calling_thread_handle = wine_server_obj_handle( GetCurrentThread() );
                             if (!(ret = wine_server_call( req )))
                             {
                                 pvmi.PeakVirtualSize = reply->peak_virtual_size;
diff --git a/server/process.c b/server/process.c
index 3b9f311e33775664b94429ae2862bfd3fbc8fa85..11c2bcf023c30b34ded78655bd93a3d61b4b560c 100644
--- a/server/process.c
+++ b/server/process.c
@@ -64,6 +64,9 @@
 #include "request.h"
 #include "user.h"
 #include "security.h"
+#include "unicode.h"
+
+static const WCHAR shader_compiling_thread[] = {'S','h','a','d','e','r','C','o','m','p','i','l','i','n','g','T','h','r','e','a','d'};
 
 /* process object */
 
@@ -1576,10 +1579,42 @@ DECL_HANDLER(get_process_image_name)
     release_object( process );
 }
 
+void fill_vm_counters_using_smaps( struct get_process_vm_counters_reply *pvmi, int unix_pid )
+{
+    FILE *f;
+    char line[256], path[32];
+    unsigned long value;
+
+    if (unix_pid == -1)
+        strcpy( path, "/proc/self/smaps_rollup" );
+    else
+        snprintf( path, sizeof(path), "/proc/%u/smaps_rollup", unix_pid);
+    f = fopen( path, "r" );
+    if (!f) return;
+
+    pvmi->pagefile_usage = 0;
+
+    while (fgets(line, sizeof(line), f))
+    {
+        if (sscanf(line, "Pss: %lu", &value)) /* Override VmRSS */
+            pvmi->working_set_size = (ULONG64)value * 1024;
+        else if (sscanf(line, "Pss_Anon: %lu", &value)) /* Override RssAnon */
+            pvmi->pagefile_usage += (ULONG64)value * 1024;
+        else if (sscanf(line, "SwapPss: %lu", &value)) /* Override VmSwap */
+            pvmi->pagefile_usage += (ULONG64)value * 1024;
+    }
+
+    fclose(f);
+}
+
 /* retrieve information about a process memory usage */
 DECL_HANDLER(get_process_vm_counters)
 {
-    struct process *process = get_process_from_handle( req->handle, PROCESS_QUERY_LIMITED_INFORMATION );
+    struct process *process = get_process_from_handle( req->process_handle, PROCESS_QUERY_LIMITED_INFORMATION );
+    struct thread *calling_thread = get_thread_from_handle(
+        req->calling_thread_handle,
+        THREAD_QUERY_INFORMATION | THREAD_QUERY_LIMITED_INFORMATION
+    );
 
     if (!process) return;
     if (process->unix_pid != -1)
@@ -1607,6 +1642,12 @@ DECL_HANDLER(get_process_vm_counters)
                 else if (sscanf( line, "VmSwap: %lu", &value ))
                     reply->pagefile_usage += (mem_size_t)value * 1024;
             }
+
+            if (calling_thread->desc_len == sizeof(shader_compiling_thread) &&
+                memicmp_strW(shader_compiling_thread, calling_thread->desc, calling_thread->desc_len) == 0) {
+                fill_vm_counters_using_smaps(reply, process->unix_pid);
+            }
+
             reply->peak_pagefile_usage = reply->pagefile_usage;
             fclose( f );
         }
diff --git a/server/protocol.def b/server/protocol.def
index dd9ace22b85e1e8c9800a44fa8ddc4b3c9efa5d8..9ebee511779e6871cd4eac9439dd49f5c1568bab 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -1198,7 +1198,8 @@ struct obj_locator
 
 /* Retrieve information about a process memory usage */
 @REQ(get_process_vm_counters)
-    obj_handle_t handle;                        /* process handle */
+    obj_handle_t process_handle;                /* process handle */
+    obj_handle_t calling_thread_handle;         /* handle of the calling thread */
 @REPLY
     mem_size_t peak_virtual_size;               /* peak virtual memory in bytes */
     mem_size_t virtual_size;                    /* virtual memory in bytes */
@@ -1604,6 +1605,15 @@ enum server_fd_type
 };
 
 
+/* Get the Unix fd for a mapped view */
+@REQ(get_fd_for_address)
+    obj_handle_t process;
+    client_ptr_t addr;
+    obj_handle_t handle;
+@REPLY
+@END
+
+
 /* Retrieve (or allocate) the client-side directory cache entry */
 @REQ(get_directory_cache_entry)
     obj_handle_t handle;        /* handle to the directory */
